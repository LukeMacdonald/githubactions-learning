name: Notes Application CI Pipeline
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
          restore-keys: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install --prefix src

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install --prefix src
      - name: Lint Code
        id: lint-test
        run: npm run test-lint --prefix src > lint-results.txt
      - name: Log Error
        if: failure() && steps.lint-test.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: lint-report
          path: lint-results.txt
  sast:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install OWASP ZAP
        run: |
          sudo apt-get update -y
          sudo apt-get install -y openjdk-11-jre-headless
          wget https://github.com/zaproxy/zaproxy/releases/download/v2.10.0/ZAP_2.10.0_Crossplatform.zip
          unzip ZAP_2.10.0_Crossplatform.zip
          export PATH=$PATH:$PWD/ZAP_2.10.0/zap.sh
      - name: Start OWASP ZAP daemon
        run: zap.sh -daemon -port 8090 -host 0.0.0.0
      - name: Install Node.js and NPM
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: src/node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install --prefix src
      - name: Run OWASP ZAP SAST scan
        run: |
          cd src
          npm run sast

  unit:
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install --prefix src
      - name: Unit Testing
        id: unit-test
        run: npm run test-unit --prefix src > unit-coverage-report-txt
      - name: Upload Unit Test Coverage Report
        uses: actions/upload-artifact@v3
        with:
            name: unit-coverage-report
            path: unit-coverage-report-txt
      - name: Log Error
        if: failure() && steps.unit-test.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-${{ github.sha }}
          path: src/reports/report.xml

  integration:
    needs: unit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install --prefix src
      - name: Run MongoDB Docker Container
        run: docker-compose up -d
      - name: Integration Testing
        id: integration-test
        run: npm run test-integration --prefix src > integration-coverage-report-txt
      - name: Upload Integration Test Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: integration-coverage-report
          path: integration-coverage-report-txt
      - name: Log Error
        if: failure() && steps.integration-test.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-${{ github.sha }}
          path: src/reports/report.xml
  e2e:
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install --prefix src
      - name: Install Playwright
        run: |
          cd src
          npx playwright install
      - name: Run MongoDB Docker Container
        run: docker-compose up -d
      - name: E2E Testing
        id: e2e-test
        run: npm run test-e2e --prefix src
      - name: Log Error
        if: failure() && steps.e2e-test.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: e2e-report
          path: src/playwright-report/index.html
  deploy:
    needs: [setup,lint,unit,integration,e2e]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install --prefix src
      - name: Deploy
        run:  cd src && npm pack
      - uses: actions/upload-artifact@v3
        with:
          name: notes-app
          path: src/notes-1.0.0.tgz
