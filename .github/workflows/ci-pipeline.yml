name: Notes Application CI Pipeline
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install --prefix src

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install --prefix src
      - name: Lint Code
        id: lint-test
        run: npm run test-lint --prefix src >> lint.txt
      - name: Log Error
        if: failure() && steps.lint-test.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: lint-report
          path: lint.txt

  unit:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install --prefix src
      - name: Unit Testing
        id: unit-test
        run: npm run test-unit --prefix src
      - name: Log Error
        if: failure() && steps.unit-test.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-${{ github.sha }}
          path: src/reports/report.xml

  integration:
    needs: unit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install --prefix src
      - name: Run MongoDB Docker Container
        run: docker-compose up -d
      - name: Integration Testing
        id: integration-test
        run: npm run test-integration --prefix src
      - name: Log Error
        if: failure() && steps.integration-test.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-${{ github.sha }}
          path: src/reports/report.xml
  e2e:
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install --prefix src
      - name: Install Playwright
        run: |
          cd src
          npx playwright install
      - name: Run MongoDB Docker Container
        run: docker-compose up -d
      - name: E2E Testing
        id: e2e-test
        run: npm run test-e2e --prefix src >> e2e.txt
      - name: Log Error
        if: failure() && steps.e2e-test.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: e2e-report
          path: e2e.txt
  deploy:
    needs: [setup,lint,unit,integration,e2e]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        if: github.ref == 'refs/heads/main'
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install --prefix src
      - name: Deploy
        run:  cd src && npm pack
      - uses: actions/upload-artifact@v3
        with:
          name: notes-app
          path: src/notes-1.0.0.tgz

